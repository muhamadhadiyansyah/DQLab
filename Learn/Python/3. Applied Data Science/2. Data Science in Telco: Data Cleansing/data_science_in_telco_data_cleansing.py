# -*- coding: utf-8 -*-
"""Data Science in Telco: Data Cleansing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kPOCsdp93h0ykXHKc2zBaTbVX8x2Kwbo

# Import Library dan Dataset
"""

# Import library
import pandas as pd
pd.options.display.max_columns = 50

# Import dataset
df_load = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/dqlab_telco.csv')

# Tampilkan jumlah baris dan kolom
print(df_load.shape)

# Tampilkan 5 data teratas
print(df_load.head(5))

# Jumlah ID yang unik
print(df_load.customerID.nunique())

"""- UpdatedAt: Periode of Data taken
- customerID: Customer ID
- gender: Whether the customer is a male or a female (Male, Female)
- SeniorCitizen: Whether the customer is a senior citizen or not (1, 0)
- Partner: Whether the customer has a partner or not (Yes, No)
- Dependents: Whether the customer has dependents or not (Yes, No)
- tenure: Number of months the customer has stayed with the company
- PhoneService: Whether the customer has a phone service or not (Yes, No)
- MultipleLines: Whether the customer has multiple lines or not (Yes, No, No phone service)
- InternetService: Customer’s internet service provider (DSL, Fiber optic, No)
- OnlineSecurity: Whether the customer has online security or not (Yes, No, No internet service)
- OnlineBackup: Whether the customer has online backup or not (Yes, No, No internet service)
- DeviceProtection: Whether the customer has device protection or not (Yes, No, No internet service)
- TechSupport: Whether the customer has tech support or not (Yes, No, No internet service)
- StreamingTV: Whether the customer has streaming TV or not (Yes, No, No internet service)
- StreamingMovies: Whether the customer has streaming movies or not (Yes, No, No internet service)
- Contract: The contract term of the customer (Month-to-month, One year, Two year)
- PaperlessBilling: Whether the customer has paperless billing or not (Yes, No)
- PaymentMethod: The customer’s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))
- MonthlyCharges: The amount charged to the customer monthly
- TotalCharges: The total amount charged to the customer
- Churn: Whether the customer churned or not (Yes or No)

# Memfilter ID Number Pelanggan Format Tertentu

kriteria:

- Panjang karakter adalah 11-12.
- Terdiri dari Angka Saja, tidak diperbolehkan ada karakter selain angka
- Diawali dengan angka 45 2 digit pertama.
"""

df_load['valid_id'] = df_load['customerID'].astype(str).str.match(r'(45\d{9,10})')

df_load = (df_load[df_load['valid_id'] == True]).drop('valid_id', axis = 1)

print('Hasil jumlah ID Customer yang terfilter adalah', df_load['customerID'].count())

"""# Memfilter Duplikasi ID Number Pelanggan"""

# Drop Duplicate Rows
df_load.drop_duplicates()

# Drop duplicate ID sorted by Periode
df_load = df_load.sort_values('UpdatedAt', ascending=False).drop_duplicates(['customerID'])

print('Hasil jumlah ID Customer yang sudah dihilangkan duplikasinya (distinct) adalah', df_load['customerID'].count())

"""# Mengatasi Missing Values dengan Penghapusan Rows"""

print('Total missing values data dari kolom Churn',df_load['Churn'].isnull().sum())

# Dropping all Rows with spesific column (churn)
df_load.dropna(subset=['Churn'], inplace=True)

print('Total Rows dan kolom Data setelah dihapus data Missing Values adalah', df_load.shape)

"""# Mengatasi Missing Values dengan Pengisian Nilai tertentu"""

print('Status Missing Values :', df_load.isnull().values.any())
print('\nJumlah Missing Values masing-masing kolom, adalah:')
print(df_load.isnull().sum().sort_values(ascending=False))

# Handling missing values Tenure fill with 11
df_load['tenure'].fillna(11, inplace=True)

# Handling missing values num vars (except Tenure)
for col_name in list(['MonthlyCharges', 'TotalCharges']):
  median = df_load[col_name].median()
  df_load[col_name].fillna(median, inplace=True)

print('\nJumlah Missing Values setelah di imputer datanya, adalah')
print(df_load.isnull().sum().sort_values(ascending=False))

"""# Mendeteksi adanya Outlier (Boxplot)"""

print('\nPersebaran data sebelum ditangani Outlier: ')
print(df_load[['tenure', 'MonthlyCharges', 'TotalCharges']].describe())

# Creating Box Plot
import matplotlib.pyplot as plt
import seaborn as sns

# Masukkan variable
plt.figure() # untuk membuat figure baru
sns.boxplot(x = df_load['tenure'])
plt.show()

plt.figure() # untuk membuat figure baru
sns.boxplot(x = df_load['MonthlyCharges'])
plt.show()

plt.figure() # untuk membuat figure baru
sns.boxplot(x = df_load['TotalCharges'])
plt.show()

"""# Mengatasi Outlier"""

# Handling with IQR
Q1 = (df_load[['tenure', 'MonthlyCharges', 'TotalCharges']]).quantile(0.25)
Q3 = (df_load[['tenure', 'MonthlyCharges', 'TotalCharges']]).quantile(0.75)

IQR = Q3 - Q1
maximum = Q3 + (1.5 * IQR)
print('Nilai Maximum dari masing-masing Variable adalah ')
print(maximum)

minimum = Q1 - (1.5 * IQR)
print('\nNilai Minimum dari masing-masing Variable adalah ')
print(minimum)

more_than = (df_load > maximum)
lower_than = (df_load < minimum)

df_load = df_load.mask(more_than, maximum, axis=1)
df_load = df_load.mask(lower_than, minimum, axis=1)

print('\nPersebaran data setelah ditangani Outlier: ')
print(df_load[['tenure', 'MonthlyCharges', 'TotalCharges']].describe())

"""# Mendeteksi Nilai yang tidak Standar"""

# Loop
for col_name in list(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod', 'Churn']):
	print('\nUnique Values Count \033[1m' + 'Before Standardized \033[0m Variable', col_name)
	print(df_load[col_name].value_counts())

"""# Menstandarisasi Variable Kategorik"""

df_load = df_load.replace(['Wanita', 'Laki-Laki', 'Churn',' Iya'], ['Female', 'Male', 'Yes', 'Yes'])

# Loop
for col_name in list(['gender', 'Dependents', 'Churn']):
	print('\nUnique Values Count \033[1m' + 'After Standardized \033[0mVariable', col_name)
	print(df_load[col_name].value_counts())