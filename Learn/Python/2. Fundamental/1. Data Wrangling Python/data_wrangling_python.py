# -*- coding: utf-8 -*-
"""Data Wrangling Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R66zZ9kxEbQWCcOsC97wI5jHqhavpssj

# Membaca file dengan menggunakan pandas
"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data)

"""# Membaca file dengan menggunakan head()"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data.head())

"""# Melakukan akses data kolom"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

# Mengetahui nama-nama kolom yang terdapat di dalam dataset
print(csv_data.columns)

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data['Age'])

"""# Melakukan akses data melalui baris"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data.iloc[5])

"""# Menampilkan suatu data dari baris dan kolom tertentu"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data['Age'].iloc[1])

print("Cuplikan Dataset")

print(csv_data.head())

"""# Menampilkan data dalam range tertentu"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print("Menampilkan data ke 5 sampai kurang dari 10")

print(csv_data['Age'].iloc[5:10])

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print("Menampilkan data ke 5 sampai kurang dari 10 dalam satu baris:")

print(csv_data.iloc[5:10])

"""# Menampilkan informasi statistik dengan Numpy"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data.describe(include="all"))

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data.describe(exclude=['O']))

"""# Melakukan pengecekan untuk nilai NULL yang ada"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")

print(csv_data.isnull().values.any())

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data_missingvalue.csv")

print(csv_data.isnull().values.any())

"""# Mengisi dengan Mean"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data_missingvalue.csv")

print(csv_data.mean())

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data_missingvalue.csv")
print(csv_data.mean())
print("Dataset yang masih terdapat nilai kosong ! :")
print(csv_data.head(10))

csv_data = csv_data.fillna(csv_data.mean())
print("Dataset yang sudah diproses Handling Missing Value dengan Mean :")
print(csv_data.head(10))

"""# Mengisi dengan Median"""

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data_missingvalue.csv")

print(csv_data.median())

import pandas as pd

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data_missingvalue.csv")
print("Dataset yang masih terdapat nilai kosong ! :")
print(csv_data.head(10))

csv_data = csv_data.fillna(csv_data.median())
print("Dataset yang sudah diproses Handling Missing Values dengan Median :")
print(csv_data.head(10))

"""# Praktek Normalisasi menggunakan Scikit Learn pada Python"""

import pandas as pd
import numpy as np
from sklearn import preprocessing

csv_data = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/shopping_data.csv")
array = csv_data.values
print(array)

X = array[:, 2 : 5] # Memisahkan fitur dari dataset. 
Y = array[:, 0 : 1]  # Memisahkan class dari dataset

dataset = pd.DataFrame({'Customer ID' : array[:, 0], 'Gender' : array[:, 1], 'Age' : array[:,2], 'Income' : array[:, 3], 'Spending Score' : array[:, 4]})
print("dataset sebelum dinormalisasi :")
print(dataset.head(10))

min_max_scaler = preprocessing.MinMaxScaler(feature_range=(0, 1)) # Inisialisasi normalisasi MinMax
data = min_max_scaler.fit_transform(X) # Transformasi MinMax untuk fitur
dataset = pd.DataFrame({'Age' : data[:, 0], 'Income' : data[:, 1], 'Spending Score' : data[:, 2], 'Customer ID' : array[:, 0], 'Gender' : array[:, 1]})

print("dataset setelah dinormalisasi :")
print(dataset.head(10))