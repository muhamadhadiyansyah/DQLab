# -*- coding: utf-8 -*-
"""Data Manipulation with Pandas - Part 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k5e_F5aYTj7m5GUJd9fBH5ZPPlDM8a4c

# Memanggil Library Pandas
"""

import pandas as pd
import numpy as np

"""# DataFrame & Series"""

# Series
number_list = pd.Series([1, 2, 3, 4, 5, 6])
print('Series:')
print(number_list)

# DataFrame
matrix = [[1, 2, 3],
          ['a', 'b', 'c'],
          [3, 4, 5],
          ['d', 4, 6]]
matrix_list = pd.DataFrame(matrix)
print('DataFrame:')
print(matrix_list)

"""# Atribut DataFrame & Series - Part 1"""

# info(): mengecek kolom apa yang membentuk dataframe itu, data types, berapa yang non null, dll. 
# Attribute ini tidak dapat digunakan pada series, hanya pada data frame saja

print(matrix_list.info())

# shape: mengetahui berapa baris dan kolom, hasilnya dalam format tuple (baris, kolom)
print('Shape dari number_list:', number_list.shape) 
print('Shape dari matrix_list:', matrix_list.shape)

# dtypes: mengetahui tipe data di tiap kolom. 
# Tipe data object: kombinasi untuk berbagai tipe data (number & text, etc).

print('Tipe data number_list:', number_list.dtypes)
print('Tipe data matrix_list:', matrix_list.dtypes)

# astype(nama_tipe_data): convert tipe data berdasarkan tipe data 
# seperti: float, int, str, numpy.float, numpy.int ataupun numpy.datetime.
print('Konversi number_list ke str:', number_list.astype('str'))
print('Konversi matrix_list ke str:', matrix_list.astype('str'))

"""# Atribut DataFrame & Series - Part 2"""

# .copy(): melakukan duplikat, untuk disimpan di variable yang berbeda mungkin supaya tidak loading data lagi.
num_list = number_list.copy()
print('Copy number_list ke num_list:', num_list)
mtr_list = matrix_list.copy()
print('Copy matrix_list ke mtr_list:', mtr_list)

# .to_list(): mengubah series menjadi list dan tidak dapat digunakan untuk dataframe.
print(number_list.to_list())

# .unique(): menghasilkan nilai unik dari suatu kolom, hasilnya dalam bentuk numpy array.
# Attribute ini hanya digunakan pada series saja.
print(number_list.unique())

"""# Atribut DataFrame & Series - Part 3"""

# .index: untuk mencari index/key dari Series atau Dataframe.
print('Index number_list:', number_list.index)
print('Index matrix_list:', matrix_list.index)

# .loc: slice dataframe atau series berdasarkan nama kolom
print('.loc[0:1] pada number_list:', number_list.loc[0:1])
print('.loc[0:1] pada matrix_list:', matrix_list.loc[0:1])

"""# QUIZ"""

matrix = [[1,2,3],
          ['a','b','c'],
          [3,4,5],
          ['d',4,6]]
matrix_list = pd.DataFrame(matrix)

matrix_list.iloc[0:2, 2].to_list()

"""# Creating Series & Dataframe from List"""

# Creating Series from List
ex_list = ['a', 1, 3, 5, 'c', 'd']
ex_series = pd.Series(ex_list)
print(ex_series)

# Creating dataframe from list of list
ex_list_of_list = [[1,'a','b','c'],
                   [2.5,'d','e','f'],
                   [5,'g','h','i'],
                   [7.5,'j',10.5,'l']]

index = ['dq', 'lab', 'kar', 'lan']
cols = ['float', 'char', 'obj', 'char']
ex_df = pd.DataFrame(ex_list_of_list, index=index, columns=cols)
print(ex_df)

"""# Creating Series & Dataframe from Dictionary"""

# Creating series from dictionary
dict_series = {'1':'a',
               '2':'b',
               '3':'c'}
          
ex_series = pd.Series(dict_series)
print(ex_series)

# Creating dataframe from dictionary
df_series = {'1':['a', 'b', 'c'],
             '2':['b', 'c', 'd'],
             '4':[2, 3, 'z']}
ex_df = pd.DataFrame(df_series, index=index)
print(ex_df)

"""# Creating Series & Dataframe from Numpy Array"""

# Creating series from numpy array (1D)
arr_series = np.array([1, 2, 3, 4, 5, 6, 6, 7])
ex_series = pd.Series(arr_series)
print(ex_series)

# Creating dataframe from numpy array (2D)
arr_df = np.array([[1, 2, 3, 5],
                   [5, 6, 7, 8],
                   ['a', 'b', 'c', 10]])
ex_df = pd.DataFrame(arr_df)
print(ex_df)

ex_df.iloc[2, 0:2] = [11, 12]

ex_df

"""# Read Dataset - CSV dan TSV"""

# Membaca File CSV
df_csv = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/sample_csv.csv')
print(df_csv.head(3))

# Membaca File TSV
df_tsv = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv', sep='\t')
print(df_tsv.head(3))

"""# Read Dataset - Excel"""

# File xlsx dengan data di sheet 'test'
df_excel = pd.read_excel('https://storage.googleapis.com/dqlab-dataset/sample_excel.xlsx', sheet_name='test')
print(df_excel.head(4))

"""# Read Dataset - JSON"""

# File JSON
url = 'https://storage.googleapis.com/dqlab-dataset/covid2019-api-herokuapp-v2.json'
df_json = pd.read_json(url)
print(df_json.head(10))

"""# Read Dataset - SQL"""

!pip3 install mysql-connector-python

import mysql.connector
# Membuat koneksi ke database
my_conn = mysql.connector.connect(host="relational.fit.cvut.cz",
                                  port=3306,
                                  user="guest",
                                  passwd="relational",
                                  database="financial",
                                  use_pure=True)
# Membuat query sql untuk membaca tabel loan
my_query = """
SELECT *
FROM loan;
"""

# Gunakanlah .read_sql_query untuk membaca tabel loan tersebut
df_loan = pd.read_sql_query(my_query, my_conn)
print(df_loan.head())

# Cara lain
# Menggunakan .read_sql
df_loan = pd.read_sql(my_query, my_conn)
print(df_loan.head())

"""# Read Dataset - Google BigQuery"""

# Buat query
query = """
SELECT *
FROM 'bigquery-public-data.covid19_jhu_csse_eu.summary'
LIMIT 1000;
"""

# Baca data dari Google Big Query
df_covid19_eu_summary = pd.read_gbq(query, project_id="XXXXXXXX")
print(df_covid19_eu_summary)

"""# Write Dataset"""

# .to_csv()
# digunakan untuk export dataframe kembali ke csv atau tsv

# CSV
df_csv.to_csv("csv1.csv", index=False)

# TSV
df_csv.to_csv("tsv1.tsv", index=False, sep='\t')

# .to_clipboard()
# export dataframe menjadi bahan copy jadi nanti bisa tinggal klik paste di excel atau google sheets

df_loan.to_clipboard()

# .to_excel()
# export dataframe menjadi file excel

df_excel.to_excel("xlsx1.xlsx", index=False)

# .to_gbq()
# export dataframe menjadi table di Google BigQuery

df.to_gbq("temp.test", project_id="XXXXXX", if_exists="fail")

"""- temp: nama dataset,

- test: nama table

- if_exists: ketika tabel dengan dataset.table_name yang sama sudah ada, apa action yang ingin dilakukan

- "fail": tidak melakukan apa-apa,

- "replace': membuang tabel yang sudah ada dan mengganti yang baru,

- "append": menambah baris di tabel tersebut dengan data yang baru

# Head & Tail
"""

import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Tampilkan 3 data teratas
print("Tiga data teratas:\n", df.head(3))

# Tampilkan 3 data terbawah
print("Tiga data terbawah:\n", df.tail(3))

"""# Indexing"""

import pandas as pd
# Baca file TSV sample_tsv.tsv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t")
# Index dari df
print("Index:", df.index)
# Column dari df
print("Columns:", df.columns)

# Baca file TSV sample_tsv.tsv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t")

# Set multi index df
df_x = df.set_index(['order_id', 'customer_id', 'product_id', 'order_date'])
print(df_x)

# Melihat multi index yang telah di set
# Index dari df_x
print("Index df_x:", df_x.index)

# Print nama dan level dari multi index
for name, level in zip(df_x.index.names, df_x.index.levels):
    print(name, ':', level)

import pandas as pd
# Baca file TSV sample_tsv.tsv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t")
# Set multi index df
df_x = df.set_index(['order_date', 'city', 'customer_id'])
# Print nama dan level dari multi index
for name, level in zip(df_x.index.names, df_x.index.levels):
    print(name,':',level)

# Buat dataframe
df_week = pd.DataFrame({
    "day_number" : [1, 2, 3, 4, 5, 6, 7],
    "week_type" : ["weekday" for i in range(5)] + ["weekend" for i in range(2)]
})

# Definisikan indexnya dan assign 
df_week.index = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
print(df_week)

# Tugas Praktek

# Baca file sample_tsv.tsv untuk 10 baris pertama saja
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t", nrows=10)

# Cetak data frame awal
print("Dataframe awal:\n", df)
# Set index baru

df.index = ["Pesanan ke-" + str(i) for i in range(1, 11)]

# Cetak data frame dengan index baru
print("Dataframe dengan index baru:\n", df)

# Baca file sample_tsv.tsv dan set lah index_col sesuai instruksi
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t", index_col=["order_date"])

# Cetak data frame untuk 8 data teratas
print("Dataframe:\n", df.head(8))

# Tugas praktek

# Baca file sample_tsv.tsv dan set lah index_col sesuai instruksi
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_tsv.tsv", sep="\t", index_col=["order_date", "order_id"])

# Cetak data frame untuk 8 data teratas
print("Dataframe:\n", df.head(8))

# quiz

df_week = pd.DataFrame({'day_number' : [1, 2, 3, 4, 5, 6, 7],
                        'week_type' : ['weekday' for i in range(5)] + ['weekend' for i in range(2)]})
df_week.ix = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
df_week.index = [df_week.ix, df_week['day_number'].to_list()]
df_week.index.names = ['name', 'num']

"""# Slicing"""

# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")

# Slice berdasarkan kolom
df_slice = df.loc[(df['order_date'] == "2019-01-01") &
                  (df['product_id'].isin(['P2154', 'P2556']))]
print('Slice langsung berdasarkan kolom:\n', df_slice)

# Tugas Praktek

# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")

# Slice berdasarkan kolom
df_slice = df.loc[(df['customer_id'] == '18055') &
                  (df['product_id'].isin(['P0029', 'P0040', 'P0041', 'P0116', 'P0117']))]
print('Slice langsung berdasarkan kolom:\n', df_slice)

# Cara 1: Gunakan method .loc seperti yang dicontohkan berikut

# Baca file sample_csv.csv
df = pd.read_csv('https://storage.googleapis.com/dqlab-dataset/sample_csv.csv')

# Set index dari df sesuai instruksi
df = df.set_index(['order_date', 'product_id'])

# Cara 1: Gunakan .loc
df_slice1 = df.loc[('2019-01-01', ['P2154', 'P2556']), :]
print('Cara 1:\n', df_slice1)

# Cara 2: Gunakan pd.IndexSlice sebagai varaibel untuk melakukan slicing index

# Cara 2: Gunakan pd.IndexSlice dan terapkan dengan .loc
idx = pd.IndexSlice
df_slice2 = df.sort_index().loc[idx['2019-01-01', 'P2154':'P2556'], :]
print('Cara 2:\n', df_slice2)

# TUGAS

import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Set index dari df sesuai instruksi
df = df.set_index(["order_date", "order_id", "product_id"])
# Slice sesuai intruksi
df_slice = df.loc[("2019-01-01", 1612339, ["P2154","P2159"]),:]
print("Slice df:\n", df_slice)

"""# Transforming"""

import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Tampilkan tipe data
print("Tipe data df:\n", df.dtypes)
# Ubah tipe data kolom order_date menjadi datetime
df["order_date"] = pd.to_datetime(df["order_date"])
# Tampilkan tipe data df setelah transformasi
print("\nTipe data df setelah transformasi:\n", df.dtypes)

import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Tampilkan tipe data
print("Tipe data df:\n", df.dtypes)
# Ubah tipe data kolom quantity menjadi tipe data numerik float
df["quantity"] = pd.to_numeric(df["quantity"], downcast="float")
# Ubah tipe data kolom city menjadi tipe data category
df["city"] = df["city"].astype("category")
# Tampilkan tipe data df setelah transformasi
print("\nTipe data df setelah transformasi:\n", df.dtypes)

import pandas as pd

# Membaca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")

# Cetak 5 baris teratas kolom brand
print("Kolom brand awal:\n", df["brand"].head())

# Ubah kolom brand menjadi lower case
df["brand"] = df["brand"].apply(lambda x: x.lower())

# Cetak 5 baris teratas kolom brand
print("Kolom brand setelah diubah:\n", df["brand"].head())

# Mengambil huruf terakhir dari brand

# Membaca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")

# Cetak 5 baris teratas kolom brand
print("Kolom brand awal:\n", df["brand"].head())

# Ambil karakter terakhir dari kolom brand
df["brand"] = df["brand"].map(lambda x: x[-1])

# Cetak 5 baris teratas kolom brand
print("Kolom brand setelah map:\n", df["brand"].head())

import pandas as pd
# Baca file sample_csv.csv
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/sample_csv.csv")
# Cetak 5 baris teratas kolom brand
print("Kolom brand awal:\n", df["brand"].head())
# Gunakan method apply untuk merubah isi kolom menjadi lower case
df["brand"] = df["brand"].apply(lambda x: x.lower())
# Cetak 5 baris teratas kolom brand
print("Kolom brand setelah apply:\n", df["brand"].head())
# Gunakan method map untuk mengambil kode brand yaitu karakter terakhirnya
df["brand"] = df["brand"].map(lambda x: x[-1])
# Cetak 5 baris teratas kolom brand
print("Kolom brand setelah map:\n", df["brand"].head())

# .applymap: untuk dataframe

import numpy as np
import pandas as pd

# number generator set angka seed menjadi suatu angka, bisa semua angka, supaya hasil randomnya selalu sama ketika kita run
np.random.seed(100)

# create dataframe 3 baris dan 5 kolom dengan angka random
df_tr = pd.DataFrame(np.random.rand(3, 5))

# Cetak dataframe
print("DataFrame:\n", df_tr)

# Cara 1 tanpa define function diawal, langsung menggunakan fungsi anonymous lambda x
df_tr1 = df_tr.applymap(lambda x: x * 100)
print("\nDataFrame - cara 1:\n", df_tr1)

# Cara 2 dengan define function
def times_100(x):
    return x * 100
df_tr2 = df_tr.applymap(times_100)
print("\nDataFrame - cara 2:\n", df_tr2)

import numpy as np
import pandas as pd
# number generator, set angka seed menjadi suatu angka, bisa semua angka, supaya hasil random nya selalu sama ketika kita run
np.random.seed(1234)
# create dataframe 3 baris dan 4 kolom dengan angka random
df_tr = pd.DataFrame(np.random.rand(3, 4)) 
# Cetak dataframe
print("Dataframe:\n", df_tr)
# Cara 1 dengan tanpa define function awalnya, langsung pake fungsi anonymous lambda x
df_tr1 = df_tr.applymap(lambda x: x**2+3*x+2) 
print("\nDataframe - cara 1:\n", df_tr1)
# Cara 2 dengan define function 
def qudratic_fun(x):
	return x**2+3*x+2
df_tr2 = df_tr.applymap(qudratic_fun)
print("\nDataframe - cara 2:\n", df_tr2)

"""# # Handling Missing Values

# Pendahuluan

https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html

# Inspeksi Missing Value
"""

# Cara 1 untuk mengetahui adanya missing value

import pandas as pd
# Baca file "public data covid19 jhu csse eu.csv"
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv")
# Cetak info dari df
print(df.info())

# Cara 2 untuk mengetahui adanya missing value

# Cetak jumlah missing value di setiap kolom
mv = df.isna().sum()
print("\nJumlah missing value per kolom:\n", mv)

import pandas as pd
# Baca file "public data covid19 jhu csse eu.csv"
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv")
# Cetak info dari df
print(df.info())
# Cetak jumlah missing value di setiap kolom
mv = df.isna().sum()
print("\nJumlah missing value per kolom:\n", mv)

"""# Treatment untuk Missing Value"""

import pandas as pd
# Baca file "public data covid19 jhu csse eu.csv"
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv")
# Cetak ukuran awal dataframe
print("Ukuran awal df: %d baris, %d kolom." % df.shape)
# Drop kolom yang seluruhnya missing value dan cetak ukurannya
df = df.dropna(axis=1, how="all")
print("Ukuran df setelah buang kolom dengan seluruh data missing: %d baris, %d kolom." % df.shape)
# Drop baris jika ada satu saja data yang missing dan cetak ukurannya
df = df.dropna(axis=0, how="any")
print("Ukuran df setelah dibuang baris yang memiliki sekurangnya 1 missing value: %d baris, %d kolom." % df.shape)



# Mengisi missing value dengan text tertentu
import pandas as pd
# Baca file "public data covid19 jhu csse eu.csv"
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv")
# Cetak unique value pada kolom province_state
print("Unique value awal:\n", df["province_state"].unique())
# Ganti missing value dengan string "unknown_province_state"
df["province_state"] = df["province_state"].fillna("unknown_province_state")
# Cetak kembali unique value pada kolom province_state
print("Unique value setelah fillna:\n", df["province_state"].unique())

import pandas as pd
# Baca file "https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv"
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv")
# Cek missing value di kolom active
print("Jumlah missing value:", df["active"].isna().sum())
# Isi missing value kolom active dengan median
df["active"] = df["active"].fillna(df["active"].median())
# Cek kembali kolom active
print("Jumlah missing value setelah diisi median:", df["active"].isna().sum())

import pandas as pd
# Baca file "https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv"
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/CHAPTER%204%20-%20missing%20value%20-%20public%20data%20covid19%20.csv")
# Cetak nilai mean dan median awal 
print("Awal: mean = %f, median = %f." % (df["active"].mean(), df["active"].median()))
# Isi missing value kolom active dengan median
df_median = df["active"].fillna(df["active"].median())
# Cetak nilai mean dan median awal setelah diisi dengan median
print("Fillna median: mean = %f, median = %f." % (df_median.mean(), df_median.median()))
# Isi missing value kolom active dengan mean
df_mean = df["active"].fillna(df["active"].mean())
# Cetak nilai mean dan median awal setelah diisi dengan mean
print("Fillna mean: mean = %f, median = %f." % (df_mean.mean(), df_mean.median()))

# Mengisi missing value dengan interpolasi (untuk time series)
import numpy as np
import pandas as pd
# Data
ts = pd.Series({
   "2020-01-01":9,
   "2020-01-02":np.nan,
   "2020-01-05":np.nan,
   "2020-01-07":24,
   "2020-01-10":np.nan,
   "2020-01-12":np.nan,
   "2020-01-15":33,
   "2020-01-17":np.nan,
   "2020-01-16":40,
   "2020-01-20":45,
   "2020-01-22":52,
   "2020-01-25":75,
   "2020-01-28":np.nan,
   "2020-01-30":np.nan
})
# Cetak time series
print("Awal:\n", ts)
# Isi missing value menggunakan interpolasi linier
ts = ts.interpolate()
# Cetak time series setelah interpolasi linier
print("Setelah diisi missing valuenya:\n", ts)

import numpy as np
import pandas as pd
# Data
ts = pd.Series({
   "2020-01-01":9,
   "2020-01-02":np.nan,
   "2020-01-05":np.nan,
   "2020-01-07":24,
   "2020-01-10":np.nan,
   "2020-01-12":np.nan,
   "2020-01-15":33,
   "2020-01-17":np.nan,
   "2020-01-16":40,
   "2020-01-20":45,
   "2020-01-22":52,
   "2020-01-25":75,
   "2020-01-28":np.nan,
   "2020-01-30":np.nan
})
# Isi missing value menggunakan interpolasi linier
ts = ts.interpolate()
# Cetak time series setelah interpolasi linier
print("Setelah diisi missing valuenya:\n", ts)

"""# # Mini Project

# Project Dari Andra
"""

import pandas as pd

# 1. Baca dataset
print("[1] BACA DATASET")
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/retail_raw_test.csv", low_memory=False)
print("    Dataset:\n", df.head())
print("    Info:\n", df.info())

# 2. Ubah tipe data
print("\n[2] UBAH TIPE DATA")
df["customer_id"] = df["customer_id"].apply(lambda x: x.split("'")[1]).astype("int64")
df["quantity"] = df["quantity"].apply(lambda x: x.split("'")[1]).astype("int64")
df["item_price"] = df["item_price"].apply(lambda x: x.split("'")[1]).astype("int64")
print("    Tipe data:\n", df.dtypes)

# 3. Transform "product_value" supaya bentuknya seragam dengan format "PXXXX", assign ke kolom baru "product_id", dan drop kolom "product_value", jika terdapat nan gantilah dengan "unknown"
print("\n[3] TRANSFORM product_value MENJADI product_id")
# Buat fungsi
import math
def impute_product_value(val):
    if math.isnan(val):
        return "unknown"
    else:
        return 'P' + '{:0>4}'.format(str(val).split('.')[0])
# Buat kolom "product_id"
df["product_id"] = df["product_value"].apply(lambda x: impute_product_value(x))
# Hapus kolom "product_value"
df.drop(["product_value"], axis=1, inplace=True)
# Cetak 5 data teratas
print(df.head())

# 4. Tranform order_date menjadi value dengan format "YYYY-mm-dd"
print("\n[4] TRANSFORM order_date MENJADI FORMAT YYYY-mm-dd")
months_dict = {
   "Jan":"01",
   "Feb":"02",
   "Mar":"03",
   "Apr":"04",
   "May":"05",
   "Jun":"06",
   "Jul":"07",
   "Aug":"08",
   "Sep":"09",
   "Oct":"10",
   "Nov":"11",
   "Dec":"12"
}
df["order_date"] = pd.to_datetime(df["order_date"].apply(lambda x: str(x)[-4:] + "-" + months_dict[str(x)[:3]] + "-" + str(x)[4:7]))
print("    Tipe data:\n", df.dtypes)

# 5. Mengatasi data yang hilang di beberapa kolom
print("\n[5] HANDLING MISSING VALUE")
# Kolom "city" dan "province" masih memiliki missing value, nilai yang hilang di kedua kolom ini diisi saja dengan "unknown"
df[["city","province"]] = df[["city","province"]].fillna("unknown")
# Kolom brand juga masih memiliki missing value, Ganti value NaN menjadi "no_brand"
df["brand"] = df["brand"].fillna("no_brand")
# Cek apakah masih terdapat missing value di seluruh kolom 
print("    Info:\n", df.info())

# 6. Membuat kolom baru "city/province" dengan menggabungkan kolom "city" dan kolom "province" dan delete kolom asalnya
print("\n[6] MEMBUAT KOLOM BARU city/province")
df["city/province"] = df["city"] + "/" + df["province"]
# drop kolom "city" dan "province" karena telah digabungkan
df.drop(["city","province"], axis=1, inplace=True)
# Cetak 5 data teratas
print(df.head())

# 7. Membuat hierarchical index yang terdiri dari kolom "city/province", "order_date", "customer_id", "order_id", "product_id"
print("\n[7] MEMBUAT HIERACHICAL INDEX")
df = df.set_index(["city/province","order_date","customer_id","order_id","product_id"])
# urutkanlah berdasarkan index yang baru
df = df.sort_index()
# Cetak 5 data teratas
print(df.head())

# 8. Membuat kolom "total_price" yang formula nya perkalian antara kolom "quantity" dan kolom "item_price"
print("\n[8] MEMBUAT KOLOM total_price")
df["total_price"] = df["quantity"] * df["item_price"]
# Cetak 5 data teratas
print(df.head())

# 9. Slice dataset agar hanya terdapat data bulan Januari 2019
print("\n[9] SLICE DATASET UNTUK BULAN JANUARI 2019 SAJA")
idx = pd.IndexSlice
df_jan2019 = df.loc[idx[:, "2019-01-01":"2019-01-31"], :]
print("Dataset akhir:\n", df_jan2019)

# END OF PROJECT

import numpy as np
import pandas as pd

# Data
ts = pd.Series({
   "2020-01-01":9,
   "2020-01-02":np.nan,
   "2020-01-05":np.nan,
   "2020-01-07":24,
   "2020-01-10":np.nan,
   "2020-01-12":np.nan,
   "2020-01-15":33,
   "2020-01-17":np.nan,
   "2020-01-16":40,
   "2020-01-20":45,
   "2020-01-22":52,
   "2020-01-25":75,
   "2020-01-28":np.nan,
   "2020-01-30":np.nan
})

# Isi missing value menggunakan interpolasi linier
ts = ts.interpolate()

# Cetak time series setelah interpolasi linier
print("Setelah diisi missing valuenya:\n", ts)

"""# Project dari Andra"""

import pandas as pd

# 1. Baca dataset
print("[1] BACA DATASET")
df = pd.read_csv("https://storage.googleapis.com/dqlab-dataset/retail_raw_test.csv", low_memory=False)
print("    Dataset:\n", df.head())
print("    Info:\n", df.info())

# 2. Ubah tipe data
print("\n[2] UBAH TIPE DATA")
df["customer_id"] = df["customer_id"].apply(lambda x: x.split("'")[1]).astype("int64")
df["quantity"] = df["quantity"].apply(lambda x: x.split("'")[1]).astype("int64")
df["item_price"] = df["item_price"].apply(lambda x: x.split("'")[1]).astype("int64")
print("    Tipe data:\n", df.dtypes)

# 3. Transform "product_value" supaya bentuknya seragam dengan format "PXXXX", assign ke kolom baru "product_id", dan drop kolom "product_value", jika terdapat nan gantilah dengan "unknown"
print("\n[3] TRANSFORM product_value MENJADI product_id")

# Buat fungsi
import math
def impute_product_value(val):
    if math.isnan(val):
        return "unknown"
    else:
        return 'P' + '{:0>4}'.format(str(val).split('.')[0])

# Buat kolom "product_id"
df["product_id"] = df["product_value"].apply(lambda x: impute_product_value(x))

# Hapus kolom "product_value"
df.drop(["product_value"], axis=1, inplace=True)

# Cetak 5 data teratas
print(df.head())

# 4. Tranform order_date menjadi value dengan format "YYYY-mm-dd"
print("\n[4] TRANSFORM order_date MENJADI FORMAT YYYY-mm-dd")
months_dict = {
   "Jan":"01",
   "Feb":"02",
   "Mar":"03",
   "Apr":"04",
   "May":"05",
   "Jun":"06",
   "Jul":"07",
   "Aug":"08",
   "Sep":"09",
   "Oct":"10",
   "Nov":"11",
   "Dec":"12"
}

df["order_date"] = pd.to_datetime(df["order_date"].apply(lambda x: str(x)[-4:] + "-" + months_dict[str(x)[:3]] + "-" + str(x)[4:7]))

print("    Tipe data:\n", df.dtypes)

# 5. Mengatasi data yang hilang di beberapa kolom
print("\n[5] HANDLING MISSING VALUE")

# Kolom "city" dan "province" masih memiliki missing value, nilai yang hilang di kedua kolom ini diisi saja dengan "unknown"
df[["city", "province"]] = df[["city", "province"]].fillna("unknown")

# Kolom brand juga masih memiliki missing value, Ganti value NaN menjadi "no_brand"
df["brand"] = df["brand"].fillna("no_brand")

# Cek apakah masih terdapat missing value di seluruh kolom 
print("    Info:\n", df.info())

# 6. Membuat kolom baru "city/province" dengan menggabungkan kolom "city" dan kolom "province" dan delete kolom asalnya
print("\n[6] MEMBUAT KOLOM BARU city/province")
df["city/province"] = df["city"] + "/" + df["province"]

# drop kolom "city" dan "province" karena telah digabungkan
df.drop(["city", "province"], axis=1, inplace=True)

# Cetak 5 data teratas
print(df.head())

# 7. Membuat hierarchical index yang terdiri dari kolom "city/province", "order_date", "customer_id", "order_id", "product_id"
print("\n[7] MEMBUAT HIERACHICAL INDEX")
df = df.set_index(["city/province", "order_date", "customer_id", "order_id", "product_id"])

# urutkanlah berdasarkan index yang baru
df = df.sort_index()

# Cetak 5 data teratas
print(df.head())

# 8. Membuat kolom "total_price" yang formula nya perkalian antara kolom "quantity" dan kolom "item_price"
print("\n[8] MEMBUAT KOLOM total_price")
df["total_price"] = df["quantity"] * df["item_price"]

# Cetak 5 data teratas
print(df.head())

# 9. Slice dataset agar hanya terdapat data bulan Januari 2019
print("\n[9] SLICE DATASET UNTUK BULAN JANUARI 2019 SAJA")
idx = pd.IndexSlice

df_jan2019 = df.loc[idx[:, "2019-01-01":"2019-01-31"], :]

print("Dataset akhir:\n", df_jan2019)